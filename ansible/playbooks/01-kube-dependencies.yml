- hosts: kube-cluster
  become: yes
  vars:
    default_user: "{{ 'admin' if ansible_facts['distribution'] == 'Debian' else 'ubuntu' }}"
    kubeadm_version: "1.22.11-00" 
    kubelet_version: "1.22.11-00"

  tasks:

    - name: Install gnupg
      package:
        name:
          - gnupg
        state: present
        update_cache: yes

    - name: Add Kubernetes' APT repository
      copy:
        content: deb http://apt.kubernetes.io/ kubernetes-xenial main
        dest: /etc/apt/sources.list.d/kubernetes.list

    - name: Add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Update and upgrade apt packages
      become: 'True'
      apt:
        upgrade: "yes"
        update_cache: "yes"

    - name: Install basic apps
      package:
        name:
          - bash-completion
          - gnupg
          - htop
          - iputils-ping
          - locales-all
          - net-tools
          - tree
          - ufw
          - vim
        state: present
        update_cache: yes

    - name: Install requirement apps
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - docker.io
          - software-properties-common
        state: present
        update_cache: yes

    - name: Disable swap in current session
      shell: swapoff -a

    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
        backup: yes

    - name: Install kubelet and kubeadm
      apt:
        name:
          - kubelet={{ kubelet_version }}
          - kubeadm={{ kubeadm_version }}
        state: present

    - name: Prevent kubeadm and kubelet from being upgraded
      shell: apt-mark hold kubelet kubeadm

    - name: Change all hostnames
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Add the inventory into /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_facts']['default_ipv4'] is defined
      with_items:
        - "{{ groups['all'] }}"

    - name: Update sysctl settings for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Load system wide configuration
      shell: sysctl --system

    - name: Change Docker cgroups to systemd
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "500m"
            },
            "storage-driver": "overlay2"
          }

    - name: Restart Docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

- hosts: kube-masters
  become: yes
  vars:
    default_user: "{{ 'admin' if ansible_facts['distribution'] == 'Debian' else 'ubuntu' }}"
  tasks:

    - name: Install kubectl
      apt:
        name: kubectl
        state: present

    - name: Prevent kubectl from being upgraded
      shell: apt-mark hold kubectl

    - name: Add k (kubectl) alias for user {{ default_user }}
      lineinfile:
        path=/home/{{ default_user }}/.bash_aliases
        line="alias k='kubectl'"
        owner="{{ default_user }}"
        group="{{ default_user }}"
        regexp='^alias k='kubectl'$'
        state=present
        insertafter=EOF
        create=True

    - name: Add k (kubectl) alias for user root
      become_user: root
      lineinfile:
        path=/root/.bash_aliases
        line="alias k='kubectl'"
        owner=root
        regexp='^alias k='kubectl'$'
        state=present
        insertafter=EOF
        create=True

    - name: Add bash-completion to .bashrc for {{ default_user }} user
      lineinfile:
        path=/home/{{ default_user }}/.bashrc
        line="source /usr/share/bash-completion/bash_completion"
        owner="{{ default_user }}"
        regexp='^source /usr/share/bash-completion/bash_completion$'
        state=present
        insertafter=EOF
        create=True

    - name: Add bash-completion to .bashrc for root user
      become_user: root
      lineinfile:
        path=/root/.bashrc
        line="source /usr/share/bash-completion/bash_completion"
        owner=root
        regexp='^source /usr/share/bash-completion/bash_completion$'
        state=present
        insertafter=EOF
        create=True

    - name: Add watch expansion alias
      lineinfile:
        path=/home/{{ default_user }}/.bashrc
        line="alias watch='watch '"
        owner="{{ default_user }}"
        regexp='^alias watch='watch'$'
        state=present
        insertafter=EOF
        create=True

    - name: Add watch expansion alias
      become_user: root
      lineinfile:
        path=/root/.bash_aliases
        line="alias watch='watch '"
        owner=root
        regexp='^alias watch='watch'$'
        state=present
        insertafter=EOF
        create=True

    - name: Add the completion script to the /etc/bash_completion.d directory
      shell: kubectl completion bash >/etc/bash_completion.d/kubectl

    - name: Extend shell completion to work with k alias for {{ default_user }} user
      lineinfile:
        path=/home/{{ default_user }}/.bashrc
        line="complete -F __start_kubectl k"
        owner={{ default_user }}
        regexp='^complete -F __start_kubectl k$'
        state=present
        insertafter=EOF
        create=True

    - name: Extend shell completion to work with k alias for root user
      become_user: root
      lineinfile:
        path=/root/.bashrc
        line="complete -F __start_kubectl k"
        owner=root
        regexp='^complete -F __start_kubectl k$'
        state=present
        insertafter=EOF
        create=True
